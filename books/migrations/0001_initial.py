# Generated by Django 5.2.6 on 2025-09-17 08:17

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('title', models.CharField(db_index=True, max_length=255, verbose_name='Title')),
                ('subtitle', models.CharField(blank=True, max_length=255, verbose_name='Subtitle')),
                ('slug', models.SlugField(blank=True, help_text='URL friendly identifier; autogenerated from title if empty', max_length=255, unique=True, verbose_name='Slug')),
                ('published_date', models.DateField(blank=True, null=True, verbose_name='Published date')),
                ('isbn', models.CharField(blank=True, help_text='ISBN-10 or ISBN-13, numbers only (or trailing X)', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid ISBN-10 or ISBN-13 (digits or X).', regex='^(97(8|9))?\\d{9}(\\d|X)$')], verbose_name='ISBN')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Price')),
                ('discounted_price', models.DecimalField(blank=True, decimal_places=2, help_text='If provided, must be less than or equal to price', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Discounted price')),
                ('is_bestseller', models.BooleanField(default=False, verbose_name='Is bestseller')),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'ordering': ['-published_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(db_index=True, max_length=150, unique=True, verbose_name='Name')),
                ('established_date', models.DateField(blank=True, null=True, verbose_name='Established date')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
            ],
            options={
                'verbose_name': 'Publisher',
                'verbose_name_plural': 'Publishers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('first_name', models.CharField(help_text='Given name', max_length=50, verbose_name='First name')),
                ('last_name', models.CharField(db_index=True, help_text='Family name', max_length=50, verbose_name='Last name')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('biography', models.TextField(blank=True, verbose_name='Biography')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
                'ordering': ['last_name', 'first_name'],
                'indexes': [models.Index(fields=['last_name', 'first_name'], name='books_autho_last_na_7ca250_idx')],
            },
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('author', 'Author'), ('coauthor', 'Co-author'), ('editor', 'Editor'), ('translator', 'Translator')], default='author', max_length=20, verbose_name='Role')),
                ('order', models.PositiveIntegerField(default=1, help_text='Author display order; 1 = first', verbose_name='Order')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.author', verbose_name='Author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.book', verbose_name='Book')),
            ],
            options={
                'verbose_name': 'Book author',
                'verbose_name_plural': 'Book authors',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='authors',
            field=models.ManyToManyField(related_name='books', through='books.BookAuthor', to='books.author', verbose_name='Authors'),
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='books', to='books.publisher', verbose_name='Publisher'),
        ),
        migrations.AddIndex(
            model_name='bookauthor',
            index=models.Index(fields=['book', 'author'], name='books_booka_book_id_4f4f55_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['title'], name='books_book_title_d3218d_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['isbn'], name='books_book_isbn_54becd_idx'),
        ),
    ]
